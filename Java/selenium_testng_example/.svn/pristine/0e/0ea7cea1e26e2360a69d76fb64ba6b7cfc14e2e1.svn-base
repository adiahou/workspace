package dxy.vs.pages;

import java.util.List;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

import org.openqa.selenium.By;
import org.openqa.selenium.Cookie;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;

import dxy.vs.base.SetUp;

public class Front_Demo1Page extends SetUp{
	

/********************************************登陆页面********************************************************/
	@FindBy(xpath="//a[contains(@class,'btn-agree')]")
	public WebElement btn_agree;

	@FindBy(xpath="//input[@id='username']")
	public WebElement input_username;

	@FindBy(xpath="//input[@name='password']")
	public WebElement input_password;

	@FindBy(xpath="//input[@name='validateCode']")
	public WebElement input_validate;

	@FindBy(xpath="//button[text()='登录']")
	public WebElement btn_login;

	@FindBy(xpath="//span[text()='跳过']")
	public WebElement btn_ignor;

	
/**************************************************首页*********************************************************/
	@FindBy(xpath="//*[@id='nav']/div/ul/li[contains(@class,'sub')]/a")
	public List<WebElement> btn_menu;
	
	@FindBy(xpath="//*[@id='nav']/div/ul/li[contains(@class,'sub')]/a[contains(text(),'首页')]")
	public WebElement menu_home;
	
	@FindBy(xpath="//a[contains(@class,'cub')]")
	public List<WebElement> btn_subMenu;
	
	@FindBy(xpath="//*[@id='container']//div[contains(@class,'module-header')]/h2/span")
	public WebElement header_listPage;

	@FindBy(xpath="//div[contains(@class,'module-header')]/h2/span")
	public List<WebElement> header_categories;
	
	@FindBy(xpath="//a[text()='继续访问']")
	public WebElement btn_continue;

	//右边栏热门推荐中的链接，包括图片和各标题
	@FindBy(xpath="//span[text()='热门推荐']/../../..//a")
	public List<WebElement> links_promote;

	//右边栏热点排行中的链接，包括图片和各标题
	@FindBy(xpath="//span[text()='热点排行']/../../..//a")
	public List<WebElement> links_hotList;

	/**************************************************列表页*********************************************************/

	@FindBy(xpath="//h2[@class='media-title']/a")
	public List<WebElement> contentTitles;
	
	@FindBy(xpath="//h2[@class='media-title'][1]/span[@class='icon icon-sticky']")
	public WebElement tag_promote;
	
	/**************************************************内容详情页*********************************************************/

	@FindBy(xpath="//h1[@class='title']")
	public WebElement text_title;

	@FindBy(xpath="//div[@class='post-header']//li[contains(text(),'来源')]")
	public WebElement text_source;

	@FindBy(xpath="//div[@class='post-header']//li[contains(text(),'作者')]")
	public WebElement text_author;

	@FindBy(xpath="//div[@class='post-content']/p[1]")
	public WebElement text_body;
	
	@FindBy(xpath=".//*[@id='J_share_0']")
	public WebElement btns_share;

	@FindBy(xpath="//div[contains(text(),'这篇内容对您是否有帮助')]")
	public WebElement btns_rate;

	@FindBy(xpath="//div[contains(@class,'action-item J_vote')]")
	public WebElement btns_like;
	
	@FindBy(xpath=".//*[text()='提交']")
	public WebElement btns_submitComm;

	@FindBy(xpath="//div[@class='sidebar']")
	public WebElement div_sidebar;
	
	/**************************************************支持请求页*********************************************************/

	@FindBy(xpath="//h3[contains(text(),'您希望得到哪些学术支持')]/..//label")
	public List<WebElement> supportOptions;

	@FindBy(xpath="//div[contains(text(),'特别声明')]")
	public WebElement statement;

	@FindBy(xpath="//label[text()='其它']/../div/input")
	public WebElement input_other;
	
	
	 public  void openDemo1Page(String name,String pw, boolean isAccept, boolean isUseSession) throws Exception{	
		String pageURL = "";
		driver.get(p("demo1_url"));
        Thread.sleep(1000);
		waitForPageLoadComplete();		
		
		//若不能进入，则重新打开页面
		pageURL = driver.getCurrentUrl();
		if(pageURL.contains("noaccept")){
			driver.get(p("demo1_url"));
			 Thread.sleep(1000);
			waitForPageLoadComplete();		
		}
		
		//点击同意，登录页面
		if(isElementExist(btn_agree)){
			btn_agree.click();
			waitForElementExist(input_username);
			waitForElementExist(input_password);
			waitForElementExist(btn_login);
		}
		
		if(isElementExist(input_username)){
			if(isElementExist(input_validate)){
				if(isUseSession){
					//读取cookie数据
		    		Cookie cookie = new Cookie.Builder("CASTGC", p("loginCookie")).domain("auth.dxy.cn").isHttpOnly(true).path("/").build();
		    		driver.manage().addCookie(cookie);
		    		
		    		driver.navigate().refresh();
		    		Thread.sleep(2000);
				}else{
					throw new Exception("无法登录，需要输入验证码。");
				}
				
			}else {
				input_username.sendKeys(name);
				input_password.sendKeys(pw);
				btn_login.click();
				waitForPageLoadComplete();	
					
				if(isElementExist(btn_ignor)){
					btn_ignor.click();
					waitForPageLoadComplete();	
				}
			}
		}
		
		pageURL = driver.getCurrentUrl();
		
		if(isAccept){
			waitForElementExist(menu_home);
		}else{
			assertTrue(pageURL.contains("noaccept"));
		}
	}
	

	 public  void openDemo1Page() throws Exception{	
		openDemo1Page(p("user_demo1"),p("pw_demo1"),true,true);
	}	
	
	 public  boolean isMenuAndCategoryPublished(String menuName) throws Exception{
		boolean isPublished = false;
		for(WebElement eachMenu:btn_menu){
			isPublished = eachMenu.getText().trim().equals(menuName);
			if(isPublished){
				break;
			}
		}
		return isPublished;	
	}
	
	 public  boolean isSubMenuPublished(String parentMenuName, String subMenuName) throws Exception{
		boolean isPublished = false;
		
		WebElement parentMenu = driver.findElement(By.xpath("//*[@id='nav']/div/ul/li[contains(@class,'sub')]/a[contains(text(),'"+parentMenuName+"')]"));
		Actions action = new Actions(driver);
		action.moveToElement(parentMenu).build().perform();
		
		for(WebElement eachMenu:btn_subMenu){
			isPublished = eachMenu.getText().trim().equals(subMenuName);
			if(isPublished){
				break;
			}
		}
		return isPublished;	
	}
	
	
	/*
	 * 验证栏目是否推荐到首页
	 * @param CategoryName
	 * @return
	 * @throws Exception
	 */
	 public  boolean isCategoryPromoted(String CategoryName) throws Exception{
		boolean isPublished = false;
		for(WebElement eachHeader:header_categories){
			isPublished = eachHeader.getText().trim().equals(CategoryName);
			if(isPublished){
				break;
			}
		}
		return isPublished;	
	}
	
		/*
		 * 验证内容是否在热门推荐列表中
		 * @param contentTitle
		 * @return
		 * @throws Exception
		 */
		 public  boolean isContentPromoted(String contentTitle) throws Exception{
			boolean isPromoted = false;
			for(WebElement eachHeader:links_promote){
				try{
					isPromoted = eachHeader.getAttribute("title").trim().equalsIgnoreCase(contentTitle);
				}catch (Exception e){}
				
				if(isPromoted){
					break;
				}
			}
			return isPromoted;	
		}
		 

	 public  void openCategoryMenuPage(String menuName, String categoryName) throws Exception{	
		boolean isMenuExist = false;
		for(WebElement eachMenu:btn_menu){
			if(eachMenu.getText().trim().equals(menuName)){
				isMenuExist = true;
				eachMenu.click();
				waitForPageLoadComplete();
				waitForElementExist(header_listPage);
				assertTrue("栏目页面没有正确打开",header_listPage.getText().trim().equals(categoryName));
				break;
			}
		}
		assertTrue("没有找到菜单",isMenuExist);
	}

	 public  void openSubMenu(String menuName,String parentMenuName, String subMenuUrl) throws Exception{	
		boolean isSubMenuExist = false;
		
		WebElement parentMenu = driver.findElement(By.xpath("//*[@id='nav']/div/ul/li[contains(@class,'sub')]/a[contains(text(),'"+parentMenuName+"')]"));
		Actions action = new Actions(driver);
		action.moveToElement(parentMenu).build().perform();
		
		for(WebElement eachMenu:btn_subMenu){
			if(eachMenu.getText().trim().equals(menuName)){
				isSubMenuExist = true;
				eachMenu.click();
				waitForPageLoadComplete();
				assertTrue(driver.getCurrentUrl().contains(subMenuUrl));
				break;
			}
		}
		assertTrue("没有找到二级菜单",isSubMenuExist);
	}
	

	 public  void openOutMenu(String menuName,String outURL) throws Exception{	
		
		 for(WebElement eachMenu:btn_menu){
			if(eachMenu.getText().trim().equals(menuName)){
				eachMenu.click();
				break;
			}
		}
        Thread.sleep(1000);
		if(isElementExist(btn_continue)){
			btn_continue.click();
	        Thread.sleep(1000);
		}
		switchToLastWindow();
		waitForPageLoadComplete();
		System.out.println(driver.getCurrentUrl());
		assertTrue(driver.getCurrentUrl().contains(outURL));
		
		driver.close();
		switchToLastWindow();
	}
	

	 public  void verifyContentProperty_allYes(String listUrl, String contentUrl) throws Exception{	
		
		//栏目列表页验证
		driver.get(listUrl);
		waitForPageLoadComplete();
		//验证置顶
		String index = getNodeNo(contentTitles,p("content_title"));
		assertTrue(index.equals("1"));
		//验证评分、评分、赞、摘要、推荐
		WebElement rate = driver.findElement(By.xpath("//span[contains(@class,'icon-sticky')]/../..//div[contains(text(),'评分')]"));
		WebElement like = driver.findElement(By.xpath("//span[contains(@class,'icon-sticky')]/../..//div[@class='action-item J_vote']"));
		WebElement comment = driver.findElement(By.xpath("//span[contains(@class,'icon-sticky')]/../..//div[contains(text(),'评论')]"));
		WebElement summary = driver.findElement(By.xpath("//span[contains(@class,'icon-sticky')]/../..//div[contains(text(),'"+p("content_summary")+"')]"));
		assertTrue(isElementExist(rate));
		assertTrue(isElementExist(like));
		assertTrue(isElementExist(comment));
		assertTrue(isElementExist(summary));
		assertTrue(isContentPromoted(p("content_title")));
		
		//内容页验证
		driver.get(contentUrl);
		waitForPageLoadComplete();
		//验证内容
		assertTrue(text_title.getText().contains(p("content_title")));
		assertTrue(text_source.getText().contains(p("content_source")));
		assertTrue(text_author.getText().contains(p("content_author")));
		assertTrue(text_body.getText().contains(p("content_body")));
		//验证属性
		assertTrue(isElementExist(btns_share));
		assertTrue(isElementExist(btns_rate));
		assertTrue(isElementExist(btns_like));
		assertTrue(isElementExist(btns_submitComm));
		assertTrue(isElementExist(div_sidebar));
		
	}
	

	 public  void verifyContentProperty_allNo(String listUrl, String contentUrl) throws Exception{	
		
		//栏目列表页验证
		driver.get(listUrl);
		waitForPageLoadComplete();
		//验证置顶
		String index = getNodeNo(contentTitles,p("content_title"));
		//验证评分、评分、赞、摘要、置顶
		List<WebElement> promote = driver.findElements(By.xpath("//div[@class='media-item']["+index+"]//span[@class='icon icon-sticky']"));
		List<WebElement>  rate = driver.findElements(By.xpath("//div[@class='media-item']["+index+"]//div[text()='评分']"));
		List<WebElement>  like = driver.findElements(By.xpath("//div[@class='media-item']["+index+"]//div[@class='action-item J_vote']"));
		List<WebElement>  comment = driver.findElements(By.xpath("//div[@class='media-item']["+index+"]//div[contains(text(),'评论')]"));
//		List<WebElement> sideBarContent = driver.findElements(By.xpath("//span[text()='热门推荐']/../../..//a[@title='"+p("content_title")+"']"));
		assertTrue(promote.size() == 0);
		assertTrue(rate.size() == 0);
		assertTrue(like.size() == 0);
		assertTrue(comment.size() == 0);
		assertFalse(isContentPromoted(p("content_title")));
		
		//内容页验证
		driver.get(contentUrl);
		waitForPageLoadComplete();
		//验证内容
		assertTrue(text_title.getText().contains(p("content_title")));
		assertTrue(text_source.getText().contains(p("content_source")));
		assertTrue(text_author.getText().contains(p("content_author")));
		assertTrue(text_body.getText().contains(p("content_body")));
		//验证属性
		assertFalse(isElementExist(btns_share));
		assertFalse(isElementExist(btns_rate));
		assertFalse(isElementExist(btns_like));
		assertFalse(isElementExist(btns_submitComm));
		assertFalse(isElementExist(div_sidebar));
	}
	
	

	 public  void verifySupport() throws Exception{	
		
		driver.get(p("support_url"));
		waitForPageLoadComplete();
		
		String options[]={"A","B","C","D","E","其它"};
		for(int i=0;i<supportOptions.size();i++){
			assertTrue("第"+i+"个选项错误",supportOptions.get(i).getText().contains(options[i]));
		}
		assertTrue("其他输入框未显示",isElementExist(input_other));
		assertTrue("声明内容错误",statement.getText().contains(p("support_statement")));
	}
	
	
	/*
	 * 验证URL是否存在
	 * @param CategoryName
	 * @return
	 * @throws Exception
	 */
	public boolean isUrlExist(String url) throws Exception{
		driver.get(url);
        Thread.sleep(1000);
		waitForPageLoadComplete();		
		if(driver.getTitle().contains("404 Page not found")){
			return false;
		}else{
			return true;
		}
	}
	
}
