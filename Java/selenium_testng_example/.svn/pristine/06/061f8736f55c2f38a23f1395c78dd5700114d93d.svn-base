package dxy.vs.pages;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.Assert;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;

import dxy.vs.base.SetUp;

public class System_ManageTagePage extends SetUp{

	@FindBy(xpath="//span[text()='系统管理']/../..")
	public WebElement menu_system;

	@FindBy(xpath="//a[contains(text(),'标签管理')]")
	public WebElement submenu_tag;

	@FindBy(xpath="//a[contains(text(),'新增')]")
	public WebElement btn_new;

	@FindBy(xpath="//section[@class='content-header']/h1")
	public WebElement pageTitle;

	@FindBy(xpath=".//*[@id='project-list']/tbody/tr/td[2]")
	public List<WebElement> values_code;

	@FindBy(xpath=".//*[@id='project-list']/tbody/tr/td[1]")
	public List<WebElement> values_name;

	@FindBy(xpath="//a[@class='J_confirm_delete']")
	public List<WebElement> btns_delete;

	@FindBy(xpath="//a[text()='列出子标签']")
	public List<WebElement> btn_subTag;

	@FindBy(xpath="//a[text()='编辑']")
	public List<WebElement> btn_edit;
	
	/**********************************************************新增、编辑标签/子标签页面********************************************************************/

	@FindBy(xpath=".//*[@id='name']")
	public WebElement input_name;

	@FindBy(xpath=".//*[@id='machine_name']")
	public WebElement input_machineName;

	@FindBy(xpath=".//*[@id='description']")
	public WebElement input_desc;

	@FindBy(xpath="//*[@class='content']//input[@id='submit']")
	public WebElement btn_save;
	
	
	
	
	
	public  void openManageTagPage() throws Exception{
		//点击系统管理菜单
		 if(!menu_system.getAttribute("class").contains("active")){
				menu_system.click();
				Thread.sleep(1000);
		 }
		submenu_tag.click();
		
		waitForPageLoadComplete();
		waitForElementExist(btn_new);
		
		//验证页面显示
		assertTrue("页面标题错误",pageTitle.getText().contains("标签管理"));
	}
	
	public void clearOldData() throws Exception{
		boolean isOldExist = false;
		 for(WebElement eachValue: values_code){
			 if(eachValue.getText().trim().equals(p("tag_code"))){
				 isOldExist=true;
			 }
		 }
		 if(isOldExist){
			 deleteTag(p("tag_code"));
		 }
	}
	
	public void createTag() {
		btn_new.click();
		waitForPageLoadComplete();
		assertTrue("未进入新增标签页",pageTitle.getText().contains("新增标签"));
		
		input_name.sendKeys(p("tag_name"));
		input_machineName.sendKeys(p("tag_code"));
		input_desc.sendKeys(p("tag_desc"));
		btn_save.click();
		waitForPageLoadComplete();
		assertTrue("未返回标签管理页",pageTitle.getText().contains("标签管理"));
		
		//列表页验证
		boolean isCreated = false;
		 for(WebElement eachValue: values_code){
			 if(eachValue.getText().trim().equals(p("tag_code"))){
				 isCreated=true;
			 }
		 }
		 Assert.assertTrue("标签为创建成功", isCreated);
	}
	
	public void editTag() {
		btn_edit.get(btn_edit.size()-1).click();
		waitForPageLoadComplete();
		assertTrue("未打开编辑标签页",pageTitle.getText().contains("编辑标签"));
		
		input_name.clear();
		input_name.sendKeys(p("tag_name_update"));
		input_desc.clear();
		input_desc.sendKeys(p("tag_desc_update"));
		btn_save.click();
		waitForPageLoadComplete();
		assertTrue("未返回标签管理页",pageTitle.getText().contains("标签管理"));
		
		//列表页验证
		boolean isEdit = false;
		 for(WebElement eachValue: values_name){
			 if(eachValue.getText().trim().equals(p("tag_name_update"))){
				 isEdit=true;
			 }
		 }
		 Assert.assertTrue("标签未编辑成功", isEdit);			
	}
	
	public void createSubTag() {
		//打开子标签管理页
		btn_subTag.get(btn_subTag.size()-1).click();
		waitForPageLoadComplete();
		assertTrue("未打开子标签管理页",pageTitle.getText().contains("子标签管理"));
		
		//打开新增子标签页
		btn_new.click();
		waitForPageLoadComplete();
		assertTrue("未打开新增子标签页",pageTitle.getText().contains("新增子标签"));
		
		input_name.sendKeys(p("subTag_name"));
		input_desc.sendKeys(p("subTag_desc"));
		btn_save.click();
		waitForPageLoadComplete();
		assertTrue("未返回标子签管理页",pageTitle.getText().contains("子标签管理"));
		
		//列表页验证
		boolean isCreated = false;
		 for(WebElement eachValue: values_name){
			 if(eachValue.getText().trim().equals(p("subTag_name"))){
				 isCreated=true;
			 }
		 }
		 Assert.assertTrue("子标签未创建成功", isCreated);		
	}
	
	public void editSubTag() {
		btn_edit.get(0).click();
		waitForPageLoadComplete();
		assertTrue("未打开编辑子标签页",pageTitle.getText().contains("编辑子标签"));
		
		input_name.clear();
		input_name.sendKeys(p("subTag_name_update"));
		input_desc.clear();
		input_desc.sendKeys(p("subTag_desc_update"));
		btn_save.click();
		waitForPageLoadComplete();
		assertTrue("未返回标子签管理页",pageTitle.getText().contains("子标签管理"));
		
		//列表页验证
		boolean isEdit = false;
		 for(WebElement eachValue: values_name){
			 if(eachValue.getText().trim().equals(p("subTag_name_update"))){
				 isEdit=true;
			 }
		 }
		 Assert.assertTrue("子标签未编辑成功", isEdit);			
	}
	
	public void deleteSubTag(String subTagName) throws Exception {
		//点击删除链接
		for(int i=0;i<values_name.size();i++){
			if(values_name.get(i).getText().trim().equals(subTagName)){
				btns_delete.get(i).click();
				break;
			}
		}
		Thread.sleep(1000);
		clickFromAlert("yes");
		Thread.sleep(1000);
		waitForPageLoadComplete();
		
		//验证已删除
		for(WebElement eachName: values_name){
			assertFalse("标签："+eachName.getText()+" 未被成功删除。", eachName.getText().trim().equals(subTagName));
		}
	}
	
	public void deleteTag(String tagCode) throws Exception {
		//点击删除链接
		for(int i=0;i<values_code.size();i++){
			if(values_code.get(i).getText().trim().equals(tagCode)){
				btns_delete.get(i).click();
				break;
			}
		}
		Thread.sleep(1000);
		clickFromAlert("yes");
		Thread.sleep(1000);
		waitForPageLoadComplete();
		
		//验证已删除
		for(WebElement eachCode: values_code){
			assertFalse("标签："+eachCode.getText()+" 未被成功删除。", eachCode.getText().trim().equals(tagCode));
		}
	}
	
}
